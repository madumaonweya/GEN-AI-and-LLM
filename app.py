from dotenv import load_dotenv
import os
import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.llms import OpenAI 
# import openai


load_dotenv(dotenv_path=".env")

# openai.api_key = "The api key"
# Create the streamlit

# title
st.title("PDF Document Question Answering App")

# Header
st.header("Ask Your PDF")

pdf = st.file_uploader("Upload your PDF", type="pdf")

# check if the uploaded file is not none

if pdf is not None:
    pdf_reader = PdfReader(pdf) # object to read the pdf
    text = ""  # variable to store the text
    for page in pdf_reader.pages:
        text += page.extract_text()

    
    text_splitter =  CharacterTextSplitter(
        separator="\n",
        chunk_size = 1000,
        chunk_overlap = 200,
        length_function = len
    )

    # split the text into smaller chunks
    chunks = text_splitter.split_text(text)

    embeddings = OpenAIEmbeddings()

    # create a knowledge base

    knowledge_base = FAISS.from_texts(chunks, embeddings)

    # get the text for the user to ask questions
    query = st.text_input("Ask Questions About your PDF")

    if query is not None:
        # search the knowledge base for documents related to the user's query
        docs = knowledge_base.similarity_search(query)

        #initialize an OpenAI model

        llm = OpenAI()

        # load a question answering chain using the OpenAI model
        chain = load_qa_chain(llm, chain_type="stuff")

        # run the chain with the input document and user's question to generate a response
        response = chain.run(input_documents = docs, question = query)

        # display the response generated by the AI model as a success message
        st.success(response)
